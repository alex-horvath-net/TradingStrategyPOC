from market.aset_provider import AsetProvider
import pandas_ta as ta   # Version: 2.2.2
import plotly.graph_objects as go # Version: 5.22.0
import numpy as np

class Startegy:
   
    def identify_rejection(self, data):
        data['rejection'] = data.apply(self.rejection, axis=1 )
        data[data["rejection"]!=0]
        return data
    
    def rejection(self, row):
        head = row['High'] - max(row['Close'], row['Open'])
        body = abs(row['Close'] - row['Open'])
        tail = min(row['Open'], row['Close']) - row['Low']

        long = 1.5 * body
        short = 0.8 * body
        min_body = 0.001 * row['Open']

        has_body = body > min_body
        has_long_head= head > long
        has_short_head= head < short
        has_long_tail = tail > long 
        has_short_tail = tail < short
                
        is_bulish_rejection = has_long_head and has_short_tail and has_body
        is_berish_rejection = has_short_head and has_long_tail and has_body
        return 2 if is_bulish_rejection else 1 if is_berish_rejection else 0


    def identify_pointpos(self, data):
        data['pointpos'] = data.apply(lambda row: self.pointpos(row,"rejection"), axis=1)
        
        return data
     
    def pointpos(row, col_name):
        if row[col_name]==1:
            return row['High']+1e-4
        elif row[col_name]==2:
            return row['Low']-1e-4
        else:
            return np.nan

    def plot_with_signal(dfpl):

        fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                        open=dfpl['Open'],
                        high=dfpl['High'],
                        low=dfpl['Low'],
                        close=dfpl['Close'])])

        fig.update_layout(
            autosize=False,
            width=1000,
            height=800, 
            paper_bgcolor='black',
            plot_bgcolor='black')
        fig.update_xaxes(gridcolor='black')
        fig.update_yaxes(gridcolor='black')
        fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                        marker=dict(size=8, color="MediumPurple"),
                        name="Signal")
        fig.show()


plot_with_signal(data[10:110])